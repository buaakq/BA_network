	m_topo[0][1]=1;
	m_topo[1][0]=1;
	m_topo[0][2]=1;
	m_topo[2][0]=1;
	m_topo[1][2]=1;
	m_topo[2][1]=1;
	srand((unsigned)time(NULL)); 
	
	if (m_badlg.DoModal() == IDOK)
	{
		m_nodesnum = m_badlg.m_num;
		float* du = new float[m_nodesnum];

		degree.SetSize(m_nodesnum);
		for (i = 0;i<m_nodesnum;i++)
		{
			degree[i] = 0;
		}
		degree[0] = 2;
		degree[1] = 2;
		degree[2] = 2;
		
		for (i = 0;i<m_nodesnum;i++)
			du[i] = 0.0;		
		
		for (UINT j=3;j<m_nodesnum;j++)
		{
			UINT totaldu = 0;
			UINT duTemp = 0;
			for (i = 0; i<j;i++)
				totaldu+=degree[i];
			for (i = 0; i<j;i++)
			{
				duTemp += degree[i]; 
				du[i] = float(duTemp)/totaldu;
			}
			linked = 0;
			while(linked<3)
			{
				i = lunpandu(rand()%10000/10000.0,du,j);
				if (i != j && m_topo[i][j] != 1)
				{
					m_topo[i][j] = 1;
					degree[i]++;
					m_topo[j][i] = 1;
					degree[j]++;
					m_lines++;
					linked++;
				}		
			}
		}
		delete [] du;
	}	